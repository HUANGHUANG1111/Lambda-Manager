<?xml version="1.0" encoding="utf-8" ?>
<main title="NJUST-SCIL多模显微镜" left="300" right="100" maximize="true">
	<!-- <commands> -->
	<!-- <command name="文件/测试" icon="test.ico" raise="TEST_COMMAND"></command> -->
	<!-- </commands> -->

	<!--<component name="opencv" lib="D:\workspace\library\opencv401\opencv\build\x64\vc15\bin\opencv_world401.dll"></component>-->
	<!--notice="平台上请不要放任何东西，请检查" -->

	<component name="algorithm" lib="lib/algorithm.dll">
		<procedure name="filter1" event="FILTER_START" arg="image">
			<action name="Drawing_Random_Lines">
				<input name="image" type="handle" />
			</action>
			<!-- <action name="Drawing_Random_Rectangles" raise="FILTER_1" arg="image"> -->
			<!-- <input name="image" type="handle" /> -->
			<!-- </action> -->
		</procedure>

		<procedure name="filter2" event="FILTER_1" arg="image">
			<action name="Drawing_Random_Ellipses">
				<input name="image" type="handle" />
			</action>
			<action name="Drawing_Random_Polylines" raise="FILTER_2" arg="image">
				<input name="image" type="handle" />
			</action>
		</procedure>

		<procedure name="filter3" event="FILTER_2" arg="image">
			<action name="Drawing_Random_Circles">
				<input name="image" type="handle" />
			</action>
			<action name="Displaying_Random_Text" raise="FILTER_END" arg="image">
				<input name="image" type="handle" />
			</action>
		</procedure>
	</component>

	<component name="illu232" lib="lib\RS232.dll" init="NativeInitLightControl,NativeInitMotorControl">
		<procedure name="OpenLED">
			<action name="OpenLED">
				<![CDATA[ Open LED ]]>
			</action>
		</procedure>

		<procedure name="CloseLED" event="CLOSELED">
			<action name="CloseLED">
				<![CDATA[ Close LED ]]>
			</action>
		</procedure>

		<procedure name="OpenLaser" event="OPENLASER">
			<action name="OpenLaser">
				<![CDATA[ Open laser ]]>
			</action>
		</procedure>

		<procedure name="CloseLaser" event="CLOSELASER">
			<action name="CloseLaser">
				<![CDATA[ Close laser ]]>
			</action>
		</procedure>

		<procedure name="StageMoveLeft" event="STAGE_MOVE_LEFT" key="direction,step">
			<!--MOVE event含step参数-->
			<action name="MoveStep">
				<!--有return：成功：0；错误码：正数-->
				<input name="direction" type="int" />
				<input name="step" type="int" />
				<![CDATA[ Move left]]>
			</action>
		</procedure>

		<procedure name="StageMoveRight" event="STAGE_MOVE_RIGHT" key="direction,step">
			<action name="MoveStep">
				<input name="direction" type="int" />
				<input name="step" type="int" />
				<![CDATA[ Move right]]>
			</action>
		</procedure>

		<procedure name="StageMoveFront" event="STAGE_MOVE_FRONT" key="direction,step">
			<action name="MoveStep">
				<input name="direction" type="int" />
				<input name="step" type="int" />
				<![CDATA[ Move front]]>
			</action>
		</procedure>

		<procedure name="StageMoveRear" event="STAGE_MOVE_REAR" key="direction,step">
			<action name="MoveStep">
				<input name="direction" type="int" />
				<input name="step" type="int" />
				<![CDATA[ Move rear]]>
			</action>
		</procedure>

		<procedure name="StageMoveUp" event="STAGE_MOVE_UP" key="direction,step">
			<action name="MoveStep">
				<input name="direction" type="int" />
				<input name="step" type="int" />
				<![CDATA[ Move up]]>
			</action>
		</procedure>

		<procedure name="StageMoveDown" event="STAGE_MOVE_DOWN" key="direction,step">
			<action name="MoveStep">
				<input name="direction" type="int" />
				<input name="step" type="int" />
				<![CDATA[ Move down]]>
			</action>
		</procedure>

		<procedure name="StageMoveRe" event="STAGE_MOVE_CENTRE" key="direction,step">
			<action name="MoveStep">
				<input name="direction" type="int" />
				<input name="step" type="int" />
				<![CDATA[ Move down]]>
			</action>
		</procedure>

		<procedure name="MoveStepLong" event="STAGE_MOVE_LONG" key="direction,IsStop">
			<action name="MoveStepLong">
				<input name="direction" type="int" />
				<input name="IsStop" type="bool" />
			</action>
		</procedure>

		<procedure name="MoveTo" event="MOTORCONTROL" key="X,Y">
			<action name="MoveTo">
				<input name="X" type="int" />
				<input name="Y" type="int" />
				<![CDATA[ Move to position x,y]]>
			</action>
		</procedure>

		<procedure name="ImageModeReset" event="IMAGE_MODE_RESET">
			<action name="ImageModeReset">
			</action>
		</procedure>

		<procedure name="ImageModeClose" event="IMAGE_MODE_CLOSE">
			<action name="ImageModeClose">
			</action>
		</procedure>

		<procedure name="BrightFieldDiameter" event="BRIGHT_FIELD_DIAMETER" key="diameter">
			<action name="BrightFieldDiameter">
				<input name="diameter" type="int" />
			</action>
		</procedure>

		<procedure name="BrightFieldBrightness" event="BRIGHT_FIELD_BRIGHTNESS">
			<action name="BrightFieldBrightness">
				<input name="brightness" type="string" />
			</action>
		</procedure>

		<procedure name="DarkFieldDiameterInner" event="DARK_FIELD_INNER" key="inner">
			<action name="DarkFieldDiameterInner">
				<input name="inner" type="int" />
			</action>
		</procedure>

		<procedure name="DarkFieldDiameterOuter" event="DARK_FIELD_OUTER" key="outer">
			<action name="DarkFieldDiameterOuter">
				<input name="outer" type="int" />
			</action>
		</procedure>

		<procedure name="DarkFieldBrightness" event="DARK_FIELD_BRIGHTNESS">
			<action name="DarkFieldBrightness">
				<input name="brightness" type="string" />
			</action>
		</procedure>

		<procedure name="DarkFieldAuto" key="auto">
			<action name="DarkFieldAuto">
				<input name="auto" type="bool" />
			</action>
		</procedure>

		<procedure name="RheinBergDiameterInner" event="RHEIN_BERG_INNER" key="inner">
			<action name="RheinBergDiameterInner">
				<input name="inner" type="int" />
			</action>
		</procedure>

		<procedure name="RheinBergDiameterOuter" event="RHEIN_BERG_OUTER" key="outer">
			<action name="RheinBergDiameterOuter">
				<input name="outer" type="int" />
			</action>
		</procedure>

		<!--<procedure name="RheinBergBrightnessBf" event="RHEIN_BERG_BRIGHTNESS_BF" key="brightness">
      <action name="RheinBergBrightnessBf">
        <input name="brightness" type="int" />
      </action>
    </procedure>

    <procedure name="RheinBergBrightnessDf" event="RHEIN_BERG_BRIGHTNESS_DF" key="brightness">
      <action name="RheinBergBrightnessDf">
        <input name="brightness" type="int" />
      </action>
    </procedure>-->

		<procedure name="RheinBergAuto" event="RHEIN_BERG_AUTO" key="auto">
			<action name="RheinBergAuto">
				<input name="auto" type="int" />
			</action>
		</procedure>

		<procedure name="RheinBergAngle" event="RHEIN_BERG_ANGLE" key="angle">
			<action name="RheinBergAngle">
				<input name="angle" type="int" />
			</action>
		</procedure>

		<procedure name="RheinBergSetData" event="RHEIN_BERG_SETDATA" key="mode,bright,darkness1,darkness2">
			<action name="RheinBergSetData">
				<input name="mode" type="int" />
				<input name="bright" type="int" />
				<input name="darkness1" type="int" />
				<input name="darkness2" type="int" />
			</action>
		</procedure>

		<procedure name="ReliefContrastOuter" event="RELIEF_CONTRAST_OUTER" key="outer">
			<action name="ReliefContrastOuter">
				<input name="outer" type="int" />
			</action>
		</procedure>

		<procedure name="ReliefContrastInner" event="RELIEF_CONTRAST_INNER" key="inner">
			<action name="ReliefContrastInner">
				<input name="inner" type="int" />
			</action>
		</procedure>

		<procedure name="ReliefContrastDirection" event="RELIEF_Rotation_Angle" key="rotationAngle">
			<action name="ReliefContrastDirection">
				<input name="rotationAngle" type="int" />
			</action>
		</procedure>

		<!-- XY-CHERRY RS232 (ADD 2022-02-09) LIGHT CONTROL -->
		<procedure name="NativeInitLightControl">
			<action name="NativeInitLightControl">
			</action>
		</procedure>

		<procedure name="NativeBrightField" event="NATIVE_BRIGHT_FIELD">
			<action name="NativeBrightField">
			</action>
		</procedure>

		<procedure name="NativeDarkField" event="NATIVE_DARK_FIELD">
			<action name="NativeDarkField">
			</action>
		</procedure>

		<procedure name="NativeRheinBerg" event="NATIVE_RHEIN_BERG">
			<action name="NativeRheinBerg">
			</action>
		</procedure>

		<procedure name="NativeReliefContrast" event="NATIVE_RELIEF_CONTRAST">
			<action name="NativeReliefContrast">
			</action>
		</procedure>

		<procedure name="NativePhaseContrast" event="NATIVE_PHASE_CONTRAST">
			<action name="NativePhaseContrast">
			</action>
		</procedure>

		<procedure name="NativeSinglePoint" arg="x,y">
			<action name="NativeSinglePoint">
				<input name="x" type="int" />
				<input name="y" type="int" />
			</action>
		</procedure>

		<procedure name="NativeSinglePointClose" arg="x,y">
			<action name="NativeSinglePointClose">
				<input name="x" type="int" />
				<input name="y" type="int" />
			</action>
		</procedure>

		<procedure name="NativeCloseLight" event="NATIVE_CLOSE_LIGHT">
			<action name="NativeCloseLight">
			</action>
		</procedure>

		<!--单次触发-->

		<procedure name="NativeBrightFieldTrigger" event="NATIVE_BRIGHT_FIELD_TRIGGER">
			<action name="NativeBrightFieldTrigger">
			</action>
		</procedure>

		<procedure name="NativeDarkFieldTrigger" event="NATIVE_DARK_FIELD_TRIGGER">
			<action name="NativeDarkFieldTrigger">
			</action>
		</procedure>

		<procedure name="NativeRheinBergTrigger" event="NATIVE_RHEIN_BERG_TRIGGER">
			<action name="NativeRheinBergTrigger">
			</action>
		</procedure>

		<procedure name="NativeReliefContrastTrigger" event="NATIVE_RELIEF_CONTRAST_TRIGGER">
			<action name="NativeReliefContrastTrigger">
			</action>
		</procedure>

		<procedure name="NativePhaseContrastTrigger" event="NATIVE_PHASE_CONTRAST_TRIGGER">
			<action name="NativePhaseContrastTrigger">
			</action>
		</procedure>

		<procedure name="NativeSinglePointTrigger" arg="x,y">
			<action name="NativeSinglePointTrigger">
				<input name="x" type="int" />
				<input name="y" type="int" />
			</action>
		</procedure>

		<procedure name="NativeChangeLightCenterPonit" arg="mode,x,y">
			<action name="NativeChangeLightCenterPonit">
				<input name="mode" type="int" />
				<input name="x" type="int" />
				<input name="y" type="int" />
			</action>
		</procedure>

		<!-- XY-CHERRY RS232 (ADD 2022-02-10) MOTOR CONTROL -->
		<procedure name="NativeInitMotorControl">
			<action name="NativeInitMotorControl">
			</action>
		</procedure>

		<procedure name="NativeMoveStep" key="nDirection,nStep">
			<action name="NativeMoveStep">
				<input name="nDirection" type="int" />
				<input name="nStep" type="int" />
			</action>
		</procedure>

		<procedure name="NativeMoveTo" key="x,y">
			<action name="NativeMoveTo">
				<input name="x" type="int" />
				<input name="y" type="int" />
			</action>
		</procedure>

		<procedure name="NativeMultiMoveStep" key="mode,x,y">
			<action name="NativeMultiMoveStep">
				<input name="mode" type="int" />
				<input name="x" type="int" />
				<input name="y" type="int" />
			</action>
		</procedure>

		<procedure name="NativeMoveLimitSensor" event="STAGE_SETTING_RESET">
			<action name="NativeMoveLimitSensor">
			</action>
		</procedure>

		<procedure name="NativeGetTotalLength" arg="x,y,z">
			<action name="NativeGetTotalLength">
				<output name="x" type="int" />
				<output name="y" type="int" />
				<output name="z" type="int" />
			</action>
		</procedure>

		<procedure name="NativeMoveToZ" event="NATIVE_MOVE_TOZ" arg="z">
			<action name="NativeMoveToZ">
				<input name="z" type="int" />
			</action>
		</procedure>

		<procedure name="InitLightControlParm" event="JSON_TO_LIGHTCONTROL_PARM" arg="pLcp">
			<action name="InitLightControlParm">
				<input name="pLcp" type="handle" />
			</action>
		</procedure>

		<procedure name="UpdateStageInformation" event="NATIVE_UPDATE_STAGE_INFORMATION">
			<action name="UpdateStageInformation">
			</action>
		</procedure>
	</component>

	<component name="Camera" lib="lib\ISCamera.dll" init="NativeInitCamera,InitCameraControlParm">
		<!-- XY-CHERRY ISCAMERA (ADD 2022-02-09) CAMERA CONTROL -->
		<procedure name="OpenCamera">
			<action name="OpenCamera">
				<![CDATA[ Open camera ]]>
			</action>
		</procedure>

		<procedure name="OpenCinema">
			<action name="OpenCinema" async="true">
				<![CDATA[ Open camera ]]>
			</action>
		</procedure>

		<procedure name="CloseCamera" event="CLOSECAM">
			<action name="CloseCamera">
				<![CDATA[ Close camera ]]>
			</action>
		</procedure>

		<procedure name="CapImage" event="CAPIMAGE" key="CamMode CAMIMG">
			<action name="CaptureImage">
				<input name="CamMode" type="int" />
				<![CDATA[ Capture and save images]]>
				<output name="CAMIMG" type="handle" /><!--生命周期参数life=""-->
			</action>
		</procedure>

		<procedure name="SaveSettings" event="SAVECAMERASETTINGS">
			<action name="SaveSettings">
				<![CDATA[ Save camera settings]]>
			</action>
		</procedure>

		<procedure name="NativeInitCamera">
			<action name="NativeInitCamera">
			</action>
		</procedure>

		<procedure name="NativeLoadProperty">
			<action name="NativeLoadProperty">
			</action>
		</procedure>

		<procedure name="NativeSaveProperty">
			<action name="NativeSaveProperty">
			</action>
		</procedure>

		<procedure name="InitCameraProperty">
			<action name="InitCameraProperty">
			</action>
		</procedure>

		<procedure name="SetBrightness" event="Slider1" key="Test">
			<action name="SetBrightness">
				<input name="Test" type="int" />
			</action>
		</procedure>

		<procedure name="SetTrigger">
			<action name="SetTrigger">
			</action>
		</procedure>

		<procedure name="GetTrigger">
			<action name="GetTrigger">
			</action>
		</procedure>

		<procedure name="GetCameraFormat" arg="col,row">
			<action name="GetCameraFormat">
				<input name="col" type="int" />
				<input name="row" type="int" />
			</action>
		</procedure>

		<procedure name="NativeStartLive" event="NATIVE_START_ALIVE">
			<action name="NativeStartLive" raise="NATIVE_UPDATE_DISPLAY_MODE">
			</action>
		</procedure>

		<procedure name="NativeStopLive" event="NATIVE_STOP_ALIVE">
			<action name="NativeStopLive">
			</action>
		</procedure>

		<procedure name="CameraSettingReset" event="CAMERA_SETTING_RESET">
			<action name="CameraSettingReset" raise="NATIVE_UPDATE_DISPLAY_MODE">
			</action>
		</procedure>

		<procedure name="CameraSettingWhiteBalance" event="CAMERA_SETTING_WHITE_BALANCE" key="mode">
			<action name="CameraSettingWhiteBalance">
				<input name="mode" type="int" />
			</action>
		</procedure>

		<procedure name="CameraSettingGain" event="CAMERA_SETTING_GAIN" key="mode,gain">
			<action name="CameraSettingGain">
				<input name="mode" type="int" />
				<input name="gain" type="double" />
			</action>
		</procedure>

		<procedure name="CameraSettingGainAuto" event="CAMERA_SETTING_GAIN_AUTO" key="mode,auto">
			<action name="CameraSettingGainAuto">
				<input name="mode" type="int" />
				<input name="auto" type="bool" />
			</action>
		</procedure>

		<procedure name="CameraSettingExposure" event="CAMERA_SETTING_EXPOSURE" key="mode,exposure">
			<action name="CameraSettingExposure" raise="NATIVE_UPDATE_DISPLAY_MODE">
				<input name="mode" type="int" />
				<input name="exposure" type="double" />
			</action>
		</procedure>

		<procedure name="CameraSettingExposureAuto" event="CAMERA_SETTING_EXPOSURE_AUTO" key="mode,auto">
			<action name="CameraSettingExposureAuto">
				<input name="mode" type="int" />
				<input name="auto" type="bool" />
			</action>
		</procedure>

		<procedure name="CameraSettingSharpness" event="CAMERA_SETTING_SHARPNESS" key="mode,sharpness">
			<action name="CameraSettingSharpness">
				<input name="mode" type="int" />
				<input name="sharpness" type="int" />
			</action>
		</procedure>

		<procedure name="CameraSettingGamma" event="CAMERA_SETTING_GAMMA | DARK_FIELD_GAMMA | RHEIN_BERG_GAMMA" key="mode,gamma">
			<action name="CameraSettingGamma">
				<input name="mode" type="int" />
				<input name="gamma" type="double" />
			</action>
		</procedure>

		<procedure name="CameraSettingDenoise" event="CAMERA_SETTING_DENOISE" key="mode,denoise">
			<action name="CameraSettingDenoise">
				<input name="mode" type="int" />
				<input name="denoise" type="int" />
			</action>
		</procedure>

		<procedure name="CameraSettingVideoFormat">
			<action name="CameraSettingVideoFormat">
			</action>
		</procedure>

		<procedure name="CameraSettingFlipV" key="bflip">
			<action name="CameraSettingFlipV">
				<input name="bflip" type="bool" />
			</action>
		</procedure>

		<procedure name="CameraSettingFlipH"  key="bflip">
			<action name="CameraSettingFlipH">
				<input name="bflip" type="bool" />
			</action>
		</procedure>

		<procedure name="NativeSetModeProperty" arg="mode">
			<action name="NativeSetModeProperty">
				<input name="mode" type="int" />
			</action>
		</procedure>

		<procedure name="InitCameraControlParm">
			<action name="InitCameraControlParm">
			</action>
		</procedure>

		<procedure name="NativeSetCentroidProperty" event="NATIVE_SET_CENTROID_PROPERTY">
			<action name="NativeSetCentroidProperty">
			</action>
		</procedure>
	</component>

	<component name="LMCore" lib="lib\LMCore.dll" >




		<procedure name="StageAutoFocus" event="STAGE_AUTO_FOCUS" key="mode">
			<action name="StageAutoFocus">
				<input name="mode" type="int" />
			</action>
		</procedure>

		<procedure name="ChangeCameraParameter" event="TEST_COMMAND">
			<action name="ChangeCameraParameter">
			</action>
		</procedure>

		<procedure name="Multidimensional" event="NATIVE_MULTI_DIMENSIONAL">
			<action name="Multidimensional">
			</action>
		</procedure>

		<procedure name="InitLmCoreParm" event="JSON_TO_LMCORE_PARM" arg="pLcp">
			<action name="InitLmCoreParm">
				<input name="pLcp" type="handle" />
			</action>
		</procedure>

		<procedure name="DirectMerger" event="ButtonTest1">
			<action name="DirectMerger">
			</action>
		</procedure>

		<!-- <procedure name="UpdateDisplayMode" event="NATIVE_UPDATE_DISPLAY_MODE"> -->
		<!-- <action name="UpdateDisplayMode"> -->
		<!-- </action> -->
		<!-- </procedure> -->

		<procedure name="ColorBarClicked" event="COLORBAR_CLICKED">
			<action name="ColorBarClicked">
			</action>
		</procedure>

		<procedure name="DividerClicked" event="MONO_CLICKED">
			<action name="DividerClicked">
			</action>
		</procedure>

		<procedure name="AntiPhaseClicked" event="DIVIDER_CLICKED">
			<action name="AntiPhaseClicked">
			</action>
		</procedure>

		<procedure name="HistogramClicked" event="HISTOGRAM_CLICKED">
			<action name="HistogramClicked">
			</action>
		</procedure>

		<!--<procedure name="QuaterClicked" event="QUATER_CLICKED">
      <action name="QuaterClicked">
      </action>
    </procedure>

    <procedure name="DualClicked" event="DUAL_CLICKED">
      <action name="DualClicked">
      </action>
    </procedure>-->

		<procedure name="BfClicked" event="BF_CLICKED">
			<action name="BfClicked">
			</action>
		</procedure>

		<procedure name="DfClicked" event="DF_CLICKED">
			<action name="DfClicked">
			</action>
		</procedure>

		<procedure name="RiClicked" event="RI_CLICKED">
			<action name="RiClicked">
			</action>
		</procedure>

		<procedure name="DpClicked"  event="DP_CLICKED">
			<action name="DpClicked">
			</action>
		</procedure>

		<procedure name="PhiClicked" event="PHI_RESETED">
			<action name="PhiClicked">
			</action>
		</procedure>

		<procedure name="FlClicked" event="FL_CLICKED">
			<action name="FlClicked">
			</action>
		</procedure>

		<!--<procedure name="CubeClicked" event="CUBE_CLICKED">
      <action name="CubeClicked">
      </action>
    </procedure>-->

		<procedure name="ViewDisplay1" event="QUATER_CLICKED1">
			<action name="ViewDisplay1">
			</action>
		</procedure>

		<procedure name="ViewDisplay2" event="DUAL_CLICKED">
			<action name="ViewDisplay2">
			</action>
		</procedure>

		<procedure name="ViewDisplay4" event="QUATER_CLICKED2">
			<action name="ViewDisplay4">
			</action>
		</procedure>

		<procedure name="ViewDisplay6" event="QUATER_CLICKED3">
			<action name="ViewDisplay6">
			</action>
		</procedure>

		<procedure name="CentroidAlgorithm" event="REPO_CLICKED">
			<action name="CentroidAlgorithm">
			</action>
		</procedure>

		<procedure name="Snapshot" event="SNAPSHOT">
			<action name="Snapshot">
			</action>
		</procedure>

		<procedure name="StopAcquire" event="STOP_ACQUIRE">
			<action name="StopAcquire">
			</action>
		</procedure>

		<procedure name="PauseAcquire" event="PAUSE_ACQUIRE">
			<action name="PauseAcquire">
			</action>
		</procedure>

		<procedure name="StartMultiMode" event="START_MULTI_MODE">
			<action name="StartMultiMode">
			</action>
		</procedure>

		<procedure name="StopMultiMode" event="STOP_MULTI_MODE">
			<action name="StopMultiMode">
			</action>
		</procedure>

		<procedure name="StartMultiChannel" event="START_MULTI_CHANNEL">
			<action name="StartMultiChannel">
			</action>
		</procedure>

		<procedure name="StopMultiChannel" event="STOP_MULTI_CHANNEL">
			<action name="StopMultiChannel">
			</action>
		</procedure>

		<procedure name="StartClicked" event="START_CLICKED">
			<action name="StartClicked">
			</action>
		</procedure>

		<procedure name="StopClicked" event="STOP_CLICKED">
			<action name="StopClicked">
			</action>
		</procedure>

		<procedure name="ForwardClicked" event="FORWARD_CLICKED">
			<action name="ForwardClicked">
			</action>
		</procedure>

		<procedure name="BackwardClicked" event="BACKWARD_CLICKED">
			<action name="BackwardClicked">
			</action>
		</procedure>



		<procedure name="OpenSerial" event="seriesProjectManager">
			<action name="OpenSerial">
				<input name="FullPath" type="string" />
			</action>
		</procedure>

		<!--<procedure name="OpenSerialTest" event="DIMENSION_CLICKED">
      <action name="OpenSerialTest">
      </action>
    </procedure>-->

		<procedure name="TIndexChanged" event="TSERIES_CHANGED" key="num">
			<action name="TIndexChanged">
				<input name="num" type="int" />
			</action>
		</procedure>

		<procedure name="ZIndexChanged" event="ZINDEX_CHANGED" key="num">
			<action name="ZIndexChanged">
				<input name="num" type="int" />
			</action>
		</procedure>

		<procedure name="ZZZTestjiajia" event="ZOME_OUT_CLICKED">
			<action name="ZZZTestjiajia">
			</action>
		</procedure>

		<procedure name="ZZZTestjianajian" event="ZOOM_IN_CLICKED">
			<action name="ZZZTestjianajian">
			</action>
		</procedure>

		<procedure name="ViewWindow" event="VIEW_WINDOW" key="window,mode">
			<action name="ViewWindow">
				<input name="window" type="int" />
				<input name="mode" type="int" />
			</action>
		</procedure>
	</component>



	<component name="CalculateDpcotf" lib="lib\CalculateDpcotf.dll" init="InitCalculateDpcotf">
		<procedure name="InitCalculateDpcotf">
			<action name="InitCalculateDpcotf">
			</action>
		</procedure>

		<procedure name="NativeCalculateDpcotf">
			<action name="NativeCalculateDpcotf" arg="mWotfLR,mWotfUD">
				<output name="mWotfLR" type="handle" />
				<output name="mWotfUD" type="handle" />
			</action>
		</procedure>
	</component>


	<component name="DPCAlgorithm" lib="lib\DPCAlgorithm.dll" init="InitDPCAlgorithm">
		<procedure name="InitDPCAlgorithm">
			<action name="InitDPCAlgorithm">
			</action>
		</procedure>

		<procedure name="NativeDPCAlgorithm">
			<action name="NativeDPCAlgorithm" arg="src,dst">
				<input name="src" type="handle" />
				<input name="dst" type="handle" />
			</action>
		</procedure>

		<procedure name="NativeDPCAlgorithm2" event="DPC_ALGORITHM" arg="src,dst">
			<action name="NativeDPCAlgorithm2">
				<input name="src" type="handle" />
				<input name="dst" type="handle" />
			</action>
		</procedure>

		<procedure name="ReliefContrastContrast" event="RELIEF_CONTRAST_CONTRAST" key="contrast">
			<action name="ReliefContrastContrast">
				<input name="contrast" type="double" />
			</action>
		</procedure>

		<procedure name="ReliefContrastGain" event="RELIEF_CONTRAST_GAIN" key="gain">
			<action name="ReliefContrastGain">
				<input name="gain" type="double" />
			</action>
		</procedure>

		<procedure name="ReliefContrastBfWeight" event="RELIEF_CONTRAST_BF_WEIGHT" key="weight">
			<action name="ReliefContrastBfWeight">
				<input name="weight" type="double" />
			</action>
		</procedure>

		<procedure name="ReliefContrastGamma" event="RELIEF_CONTRAST_GAMMA" key="gamma">
			<action name="ReliefContrastGamma">
				<input name="gamma" type="double" />
			</action>
		</procedure>

		<procedure name="ReliefContrastDpWeight" event="RELIEF_CONTRAST_DP_WEIGHT" key="weight">
			<action name="ReliefContrastDpWeight">
				<input name="weight" type="double" />
			</action>
		</procedure>

		<procedure name="ReliefContrastBgCollection" event="RELIEF_CONTRAST_BG_COLLECTION">
			<action name="ReliefContrastBgCollection">
			</action>
		</procedure>
	</component>

	<component name="PhaseAlgorithm" lib="lib\PhaseAlgorithm.dll" init="InitPhaseAlgorithm">
		<procedure name="InitPhaseAlgorithm">
			<action name="InitPhaseAlgorithm">
				<input name="CalculateDpcotf" type="action" value="NativeCalculateDpcotf" />
			</action>
		</procedure>

		<procedure name="QuantitativePhaseRegularization" event="QUANTITATIVE_PHASE_REG" key="regularization">
			<action name="QuantitativePhaseRegularization">
				<input name="regularization" type="double" />
			</action>
		</procedure>

		<procedure name="QuantitativePhaseDetail" event="QUANTITATIVE_PHASE_DETAIL" key="detail">
			<action name="QuantitativePhaseDetail">
				<input name="detail" type="int" />
			</action>
		</procedure>

		<procedure name="QuantitativePhaseMin" event="QUANTITATIVE_PHASE_MIN" key="min">
			<action name="QuantitativePhaseMin">
				<input name="min" type="double" />
			</action>
		</procedure>

		<procedure name="QuantitativePhaseMax" event="QUANTITATIVE_PHASE_MAX" key="max">
			<action name="QuantitativePhaseMax">
				<input name="max" type="double" />
			</action>
		</procedure>

		<procedure name="QuantitativePhaseGamma" event="QUANTITATIVE_PHASE_GAMMA" key="gamma">
			<action name="QuantitativePhaseGamma">
				<input name="gamma" type="double" />
			</action>
		</procedure>

		<procedure name="QuantitativePhaseBgCollection" event="QUANTITATIVE_PHASE_BG_COLLECTION">
			<action name="QuantitativePhaseBgCollection">
			</action>
		</procedure>

		<procedure name="PhaseContrastFilter" event="PHASE_CONTRAST_FILTER" key="filter">
			<action name="PhaseContrastFilter">
				<input name="filter" type="double" />
			</action>
		</procedure>

		<procedure name="PhaseContrastContrast" event="PHASE_CONTRAST_CONTRAST" key="contrast">
			<action name="PhaseContrastContrast">
				<input name="contrast" type="double" />
			</action>
		</procedure>

		<procedure name="PhaseContrastGain" event="PHASE_CONTRAST_GAIN" key="gain">
			<action name="PhaseContrastGain">
				<input name="gain" type="double" />
			</action>
		</procedure>

		<procedure name="PhaseContrastBfWeight" event="PHASE_CONTRAST_BF_WEIGHT" key="weight">
			<action name="PhaseContrastBfWeight">
				<input name="weight" type="double" />
			</action>
		</procedure>

		<procedure name="PhaseContrastGamma" event="PHASE_CONTRAST_GAMMA" key="gamma">
			<action name="PhaseContrastGamma">
				<input name="gamma" type="double" />
			</action>
		</procedure>

		<procedure name="PhaseContrastPcWeight" event="PHASE_CONTRAST_PC_WEIGHT" key="weight">
			<action name="PhaseContrastPcWeight">
				<input name="weight" type="double" />
			</action>
		</procedure>

		<procedure name="PhaseContrastBgCollection" event="PHASE_CONTRAST_BG_COLLECTION">
			<action name="PhaseContrastBgCollection">
			</action>
		</procedure>

		<procedure name="PhaseContrastPn" event="QUANTITATIVE_PHASE_PN" key="pn">
			<action name="PhaseContrastPn">
				<input name="pn" type="bool" />
			</action>
		</procedure>

		<procedure name="NativePhaseAlgorithm">
			<action name="NativePhaseAlgorithm" arg="src,dst,mode">
				<input name="src" type="handle" />
				<output name="dst" type="handle" />
				<input name="mode" type="int" />
			</action>
		</procedure>

		<procedure name="NativePhaseAlgorithm2" event="PHASE_ALGORITHM" arg="src,dst">
			<action name="NativePhaseAlgorithm2">
				<input name="src" type="handle" />
				<output name="dst" type="handle" />
			</action>
		</procedure>

		<procedure name="NativeContrastAlgorithm" event="CONTRAST_ALGORITHM" arg="mSrc,mDst">
			<action name="NativeContrastAlgorithm">
				<input name="mSrc" type="handle" />
				<output name="mDst" type="handle" />
			</action>
		</procedure>
	</component>

	<component name="JSONAnalysis" lib="lib\JSONAnalysis.dll" init="InitJsonAnalysis">
		<procedure name="InitJsonAnalysis">
			<action name="InitJsonAnalysis">
				<input name="Camera" type="action" value="GetCameraFormat" />
			</action>
		</procedure>

		<procedure name="ObjectiveLenSetting" event="OBJECTIVE_LENS_SETTING" key="magnitude,na">
			<action name="ObjectiveLenSetting">
				<input name="magnitude" type="int" />
				<input name="na" type="double" />
			</action>
		</procedure>

		<procedure name="StartAcquire" event="START_ACQUIRE1">
			<action name="StartAcquire">
				<input name="data" type="string" />
			</action>
		</procedure>
	</component>



	<component name="MergerAlgorithm" lib="lib\MergerAlgorithm.dll">
		<procedure name="NativeMerger">
			<action name="NativeMerger">
			</action>
		</procedure>

		<procedure name="NativeMergerAlgorithm">
			<action name="NativeMergerAlgorithm" arg="vSrc,mDst,step">
				<input name="vSrc" type="handle" />
				<output name="mDst" type="handle" />
				<input name="step" type="int" />
			</action>
		</procedure>
	</component>

	<component name="MotorControl" lib="lib\RS232.dll">
		<procedure name="MoveZ" event="MOTORCONTROL">
			<action name="MoveZ">
				<input name="DefocusedDistance" type="int" />
				<![CDATA[ Move along z axis]]>
			</action>
		</procedure>
	</component>

	<component name="BrightDark" lib="lib\DPC.dll" depend="opencv,illu232,Camera">
		<procedure name="Bright" event="BRIGHTMODE_ACTIVATED">
			<action name="OpenCamera" component="Camera">
				<![CDATA[ Open camera ]]>
			</action>
			<action name="OpenLED" component="illu232">
				<![CDATA[ Open the LED serial port ]]>
			</action>
			<action name="LEDBright">
				<![CDATA[ Illuminate ]]>
			</action>
			<action name="CapImage" component="Camera" raise="BRIGHT_READY">
				<![CDATA[ Capture image and show]]>
				<output  name="BrightImg" type="handle" />
			</action>
		</procedure>

		<procedure name="Dark" event="DARKMODE_ACTIVATED">
			<action name="OpenCamera" component="Camera">
				<![CDATA[ Open camera ]]>
			</action>
			<action name="OpenLED" component="illu232">
				<![CDATA[ Open the LED serial port ]]>
			</action>
			<action name="LEDDark">
				<![CDATA[ Illuminate ]]>
			</action>
			<action name="CapImage" component="Camera" raise="DARK_READY">
				<![CDATA[ Capture image and show]]>
				<output type="handle" name="DARKIMG" />
			</action>
		</procedure>
	</component>

	<component name="DPC" lib="lib\DPC.dll" depend="opencv,illu232,Camera">
		<procedure name="ChangeMagnification">
			<action name="ChangeMagnification">
				<input name="mag" type="int" />
				<![CDATA[ Change Magnification]]>
			</action>
		</procedure>

		<procedure name="DPCThread" event="DPCTHREAD_ACTIVATED">
			<action name="OpenCamera" component="Camera">
				<![CDATA[ Open camera ]]>
			</action>
			<action name="OpenLED" component="illu232">
				<![CDATA[ Open the LED serial port ]]>
			</action>

			<procedure name="DPCThread">
				<action name="DICImgCalculate" raise="DPC_READY">
					<input type="handle" name="DICIMG_1" />
					<input type="handle" name="DICIMG_2" />
					<![CDATA[ Differential Image Calculate]]>
					<output name="DICIMG" type="handle" />
				</action>
			</procedure>
		</procedure>
	</component>

	<component name="PhaseContrast" lib="lib\DPC.dll" depend="opencv,illu232,MotorControl,Camera,DPCAlgorithm">

		<procedure name="DPC2PCThread" event="DPC2PCTHREAD_ACTIVATED">
			<action name="OpenCamera" component="Camera">
				<![CDATA[ Open camera ]]>
			</action>
			<action name="OpenLED" component="illu232">
				<![CDATA[ Open the LED serial port ]]>
			</action>
			<action name="CapImage"  component="Camera">
				<![CDATA[ Capture image once ]]>
				<output type="handle" name="DICIMG_R" />
			</action>
			<action name="DICImgCalculate4">
				<input type="handle" name="DICIMG_U" />
				<input type="handle" name="DICIMG_D" />
				<input type="handle" name="DICIMG_L" />
				<input type="handle" name="DICIMG_R" />
				<![CDATA[ Calculate Contrast ]]>
				<output type="handle" name="DPCIMG_LR" />
				<output type="handle" name="DPCIMG_UD" />
			</action>
			<action name="CalcPhaseContrast" raise="PHASECONTRAST_READY">
				<input type="handle" name="DPCIMG_LR" />
				<input type="handle" name="DPCIMG_UD" />
				<![CDATA[ Calculate Contrast ]]>
				<output type="handle" name="PhaseContrast" />
			</action>
		</procedure>
	</component>


	<component name="CameraDialog" lib="MenuISCameraSetting.dll" mount="menu:帮助/相机参数..." />

	<component name="ToolControl" lib="ConfigObjective.dll" mount="acquire:0" />

	<component name="TreeViewControl" lib="Solution.dll" mount="project:0" />

	<!--<component name="TreeViewControl" lib="WpfApp1.dll" mount="project:0">
	</component>-->

	<!-- <component name="DPCMode" lib="ConfigDPCMode.dll" mount="acquire:1"> -->
	<!-- <procedure name="GUI_ChangeDPCMode"> -->

	<!-- </procedure> -->
	<!-- </component> -->

	<!-- <component name="BaseDeck" lib="ConfigDeck.dll" mount="acquire:2" /> -->

	<!-- <component name="SampleContainer" lib="ConfigContainer.dll" mount="acquire:3" /> -->

	<!-- <component name="SampleSpot" lib="ConfigSpot.dll" mount="acquire:4" /> -->

	<!-- <component name="FocusMode" lib="ConfigFocus.dll" mount="acquire:5" /> -->

	<!-- <component name="DOFMode" lib="ConfigDOFMode.dll" mount="acquire:6" /> -->

	<!-- <component name="CollectInterval" lib="ConfigCollectInterval.dll" mount="acquire:7" > -->
	<!-- <procedure name="SetCollectInterval"> -->
	<!-- <action name="SetCollectInterval" raise="OPENLED"> -->
	<!-- <![CDATA[ Send open-LED signal to illu232]]> -->
	<!-- </action> -->
	<!-- </procedure> -->
	<!-- </component> -->

	<component name="Interop Test" lib="lib\InteropTest.dll">
		<procedure name="group1" async="true">
			<action name="Test0" />
			<action name="Test1">
				<input name="c1a" type="char" value="'A'" />
			</action>
			<action name="Test1">
				<input name="c1b" type="char" value="-123" />
			</action>
			<action name="Test1">
				<input name="c1c" type="char" value="A" />
			</action>
			<action name="Test2">
				<input name="c2a" type="unsigned char" value="65" />
			</action>
			<action name="Test2">
				<input name="c2b" type="unsigned char" value="255" />
			</action>
			<action name="Test3">
				<input name="x3a" type="int" value="12345" />
			</action>
			<action name="Test3">
				<input name="x3b" type="int" value="-12345" />
			</action>
			<action name="Test4">
				<input name="x4" type="unsigned int" value="4294954951" />
			</action>
			<action name="Test5">
				<input name="x5" type="long" value="-1234567890" />
			</action>
			<action name="Test6">
				<input name="x6" type="unsigned long" value="1234567891" />
			</action>
			<action name="Test7">
				<input name="x7" type="float" value="1.2345" />
			</action>
			<action name="Test8">
				<input name="x8" type="double" value="1.23456789" />
			</action>
			<action name="Test9">
				<input name="x9" type="long int" value="-1234567890" />
			</action>
			<action name="Test10">
				<input name="x10" type="long long" value="12345678901235" />
			</action>
			<action name="Test11">
				<input name="x11" type="long double" value="1.234567890123456789" />
			</action>
			<action name="Test12">
				<input name="c1a" type="char*" />
			</action>
			<action name="Test13">
				<input name="c2b" type="unsigned char*" />
			</action>
			<action name="PrepareStdString">
				<output name="STD_STRING" type="string" />
			</action>
			<action name="Test14">
				<input name="STD_STRING" type="string" />
			</action>
			<action name="Test15">
				<input name="s1" type="string" value="ABC,abc" />
			</action>
			<action name="PrepareCString">
				<output name="CSTRING_V" type="wchar_t*" />
			</action>
			<action name="Test15">
				<input name="CSTRING_V" type="wchar_t*" />
			</action>
			<action name="PrepareLPSTR">
				<output name="V_S16A" type="LPSTR" />
			</action>
			<action name="Test16a">
				<input name="V_S16A" type="LPSTR" />
			</action>
			<action name="PrepareLPCSTR">
				<output name="V_S16B" type="LPCSTR" />
			</action>
			<action name="Test16b">
				<input name="V_S16B" type="LPCSTR" />
			</action>
			<action name="PrepareLPTSTR">
				<output name="V_S16C" type="LPTSTR" />
			</action>
			<action name="Test16c">
				<input name="V_S16C" type="LPTSTR" />
			</action>
			<action name="PrepareLPCTSTR">
				<output name="V_S16D" type="LPCTSTR" />
			</action>
			<action name="Test16d">
				<input name="V_S16D" type="LPCTSTR" />
			</action>
			<action name="PrepareLPWSTR">
				<output name="V_S16E" type="LPWSTR" />
			</action>
			<action name="Test16e">
				<input name="V_S16E" type="LPWSTR" />
			</action>
			<action name="PrepareLPCWSTR">
				<output name="V_S16F" type="LPCWSTR" />
			</action>
			<action name="Test16f">
				<input name="V_S16F" type="LPCWSTR" />
			</action>
			<action name="Test17">
				<input name="x3a" type="int*" />
			</action>
			<action name="Test18">
				<input name="x4" type="unsigned int*" />
			</action>
			<action name="Test19">
				<input name="x5" type="long*" />
			</action>
			<action name="Test20">
				<input name="x6" type="unsigned long*" />
			</action>
			<action name="Test21">
				<input name="x7" type="float*" />
			</action>
			<action name="Test22">
				<input name="x8" type="double*" />
			</action>
			<action name="Test23">
				<input name="x9" type="long int*" />
			</action>
			<action name="Test24">
				<input name="x10" type="long long*" />
			</action>
			<action name="Test25">
				<input name="x11" type="long double*" />
			</action>
			<action name="Test26">
				<input name="x26" type="char[]" value="[1,2,'a','b']" />
				<input name="size" type="int" value="4" />
			</action>
			<action name="Test26x">
				<input name="x26" type="char[]" value="[1,2,'a','b',3,'c']" />
			</action>
			<action name="Test27">
				<input name="x27" type="int[]" value="[123,0,-456]" />
				<input name="size" type="int" value="3" />
			</action>
			<action name="Test28">
				<input name="x28" type="long[]" value="[1234567892,0,-1234567892]" />
				<input name="size" type="int" value="3" />
			</action>
			<action name="Test29">
				<input name="x29" type="float[]" value="[1.234,0,-1.234]" />
				<input name="size" type="int" value="3" />
			</action>
			<action name="Test30">
				<input name="x30" type="double[]" value="[1.23456789,0,-1.23456789]" />
				<input name="size" type="int" value="3" />
			</action>
			<action name="Test31">
				<input name="x31" type="long int[]" value="[1234567893,0,-1234567893]" />
				<input name="size" type="int" value="3" />
			</action>
			<action name="Test32">
				<input name="x32" type="long long[]" value="[12345678901234,0,-12345678901234]" />
				<input name="size" type="int" value="3" />
			</action>
			<action name="Test33">
				<input name="x33" type="long double[]" value="[1.234567890123456789,0,-1.234567890123456789]" />
				<input name="size" type="int" value="3" />
			</action>
			<action name="Test34">
				<input name="x34" type="string[]" value="[&quot;aa&quot;,&quot;bb,&quot;,&quot;cc,dd&quot;]" />
				<input name="size" type="int" value="3" />
			</action>
			<action name="Test40">
				<input name="c" type="char" value="A" />
				<input name="x1" type="int" value="123" />
			</action>
			<action name="Test41">
				<input name="x" type="long" value="1234567894" />
				<input name="c" type="char" value="A" />
			</action>
			<action name="Test42">
				<input name="x1" type="int*" />
				<input name="c" type="char" value="A" />
			</action>
			<action name="Test43">
				<input name="c" type="char" value="A" />
				<input name="x1" type="int*" />
			</action>
			<action name="Test44">
				<input name="x1" type="int*" />
				<input name="y1" type="long" value="1234567895" />
			</action>
			<action name="Test45">
				<input name="y1" type="long" value="1234567895" />
				<input name="x1" type="int*" />
			</action>
			<action name="Test46">
				<input name="x27" type="int[]" />
				<input name="n" type="int" value="3" />
				<input name="y1" type="long*" />
			</action>
			<action name="Test50">
				<input name="c" type="char" value="B" />
				<input name="x" type="long" value="1234567896" />
				<input name="y" type="int" value="135" />
			</action>
			<action name="Test51">
				<input name="x" type="long" value="1234567897" />
				<input name="c" type="char" value="C" />
				<input name="y" type="int" value="246" />
			</action>
			<action name="Test52">
				<input name="y" type="int*" />
				<input name="x" type="long*" />
				<input name="c" type="char*" />
			</action>
			<action name="Test53">
				<input name="a" type="char[]" value="['a','b']" />
				<input type="int" value="2" />
				<input name="c1a" type="char*" />
				<input name="V_S16B" type="LPCSTR" />
			</action>
			<action name="Test60">
				<input name="c" type="char" value="A" />
				<input name="x" type="int" value="112345" />
				<input name="y" type="long" value="1234567898" />
				<input name="x7" type="float*" />
			</action>
			<action name="Test61">
				<input name="c" type="double" value="9.87654321" />
				<input name="x" type="int" value="112233" />
				<input name="y" type="float" value="5.4321" />
				<input name="x7" type="char" value="A" />
			</action>
			<action name="Test62">
				<input name="ld" type="long double" value="1.234567890123456789" />
				<input name="x" type="int" value="12345" />
				<input name="lx" type="long int" value="1234567899" />
				<input name="ll" type="long long" value="12345678901234" />
			</action>
			<action name="Test71">
				<input name="STD_STRING" type="string" />
				<input name="x" type="int" value="112233" />
				<input name="y" type="long long" value="12345678901235" />
				<input type="float" value="1.2345" />
				<input name="d" type="double" value="1.2233445566" />
			</action>
			<action name="Test72">
				<input name="d" type="double" value="1.2233445566" />
				<input name="f" type="float" value="1.2345" />
				<input name="y" type="long long" value="12345678901236" />
				<input name="x" type="int" value="112233" />
				<input name="c1a" type="char*" />
			</action>
			<action name="Test73">
				<input type="string" value="hello" />
				<input name="x26" type="char[]" />
				<input name="V_S16D" type="LPCTSTR" />
				<input name="CSTRING_V" type="wchar_t*" />
				<input name="V_S16F" type="LPCWSTR" />
			</action>
			<action name="Test80">
				<input name="x" type="int" value="123" />
				<input name="y" type="long" value="1234567880" />
				<input name="f" type="float" value="1.23456" />
				<input name="d" type="double" value="1.23456789" />
				<input name="lx" type="long int" value="1234567888" />
				<input name="ld" type="long double" value="1.234567890123456789" />
			</action>
			<action name="Test81">
				<input name="x" type="int*" />
				<input name="y" type="long*" />
				<input name="f" type="float*" />
				<input name="d" type="double*" />
				<input name="lx" type="long int*" />
				<input name="ld" type="long double*" />
			</action>
			<action name ="Test101" />
			<!-- <action name="Test102"> -->
			<!-- <input name="Camera" type="action" value="MoveTo" /> -->
			<!-- <input name="Camera" type="action" value="CaptureImage" /> -->
			<!-- </action> -->
		</procedure>
	</component>

	<component name="Event Test" lib="lib\InteropTest.dll">
		<procedure name="init">
			<action name="Test120" raise="TEST_EVENT_A|TEST_EVENT_B" async="true" />
			<action name="Test124" raise="TEST_EVENT_1" />
			<action name="Test124" raise="{&quot;type&quot;:&quot;TEST_EVENT_2&quot;, &quot;x&quot;:1, &quot;y&quot;:2}" />
			<action name="Test125" raise="TEST_EVENT_3" key="x,y,z" async="true">
				<input name="x" type="int" value="123" />
				<input name="y" type="string" value="abc" />
				<output name="z" type="string" />
			</action>
		</procedure>
		<procedure name="dispatch">
			<action name="Test160"></action>
		</procedure>

		<procedure name="proc1" event="TEST_EVENT_1">
			<action name="Test131" />
		</procedure>
		<procedure name="proc2" event="TEST_EVENT_2|TEST_EVENT_A">
			<action name="Test132">
				<input name="event" type="json*" />
			</action>
		</procedure>
		<procedure name="proc3" event="TEST_EVENT_3">
			<action name="Test133">
				<input name="event" type="string" />
			</action>
		</procedure>

		<procedure name="proc4" event="TEST_EVENT_B">
			<action name="Test134" />
			<action name="Test135" />
		</procedure>

		<procedure name="proc5">
			<action name="Test200" />
		</procedure>

		<procedure name="proc6" event="TEST_EVENT_DOUBLE" key="value">
			<action name="Test136">
				<input name="value" type="double" />
			</action>
		</procedure>
	</component>

	<component name="Scheduler Test" lib="lib\InteropTest.dll" init="schedule trigger job">
		<procedure name="every minute job" timer="0 0/1 * * * ?">
			<action name="Test150" />
		</procedure>

		<procedure name="schedule trigger job">
			<action name="Test151"></action>
		</procedure>
	</component>
</main>